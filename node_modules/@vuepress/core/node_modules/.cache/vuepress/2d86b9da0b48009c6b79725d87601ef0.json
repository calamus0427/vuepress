{"remainingRequest":"/Users/calamus/calamus/my-project/vue-press/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/calamus/calamus/my-project/vue-press/node_modules/vuepress-theme-yubisaki/package/comment/components/Comment.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/vuepress-theme-yubisaki/package/comment/components/Comment.vue","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Svg from \"./Svg\";\nimport distanceInWordsToNow from \"date-fns/distance_in_words_to_now\";\nimport buildDistanceInWordsLocaleZHCN from \"date-fns/locale/zh_cn/build_distance_in_words_locale/index\";\nimport \"github-markdown-css/github-markdown.css\";\n\nconst ZHCN = buildDistanceInWordsLocaleZHCN();\n\nexport default {\n    components: {\n        SvgSpinner: Svg\n    },\n    props: {\n        user: {\n            default: null\n        },\n        comment: {\n            default: null\n        },\n        language: {\n            default: \"en\"\n        },\n        commentedText: {\n            default: \"\"\n        },\n        admin: {\n            default: () => []\n        }\n    },\n    computed: {\n        enableEdit() {\n            if (this.user) {\n                return this.comment.user.login === this.user.login;\n            }\n            return false;\n        },\n        avatarUrl() {\n            if (this.comment.user) {\n                return this.comment.user.avatar_url;\n            }\n            return null;\n        },\n        userInfoUrl() {\n            if (this.comment.user) {\n                return this.comment.user.html_url;\n            }\n            return null;\n        },\n        userName() {\n            if (this.comment.user) {\n                return this.comment.user.login;\n            }\n            return \"\";\n        },\n        commentDate() {\n            distanceInWordsToNow(this.comment.created_at, {\n                addSuffix: true,\n                locale: {\n                    distanceInWords: ZHCN\n                }\n            });\n        },\n        reactions() {\n            return this.comment.reactions;\n        },\n        reactionCount() {\n            let count = 0;\n            const reactions = this.reactions;\n            if (reactions && reactions.totalCount) {\n                count = reactions.totalCount;\n                if (\n                    reactions.totalCount === 100 &&\n                    reactions.pageInfo &&\n                    reactions.pageInfo.hasNextPage\n                ) {\n                    count = \"100+\";\n                }\n            }\n            return count;\n        },\n        isAdmin() {\n            return ~[]\n                .concat(this.admin)\n                .map(a => a.toLowerCase())\n                .indexOf(this.comment.user.login.toLowerCase());\n        },\n        commentClass() {\n            return [\n                \"gt-comment\",\n                {\n                    \"gt-comment-admin\": this.isAdmin\n                }\n            ];\n        }\n    },\n    methods: {\n        reply() {\n            this.$emit('reply', this.comment)\n        },\n        likeAction() {\n            if (this.reactions && this.reactions.viewerHasReacted) {\n                this.$emit('unlike', this.comment)\n            } else {\n                this.$emit('like', this.comment)\n            }\n        }\n    }\n};\n",{"version":3,"sources":["Comment.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"Comment.vue","sourceRoot":"node_modules/vuepress-theme-yubisaki/package/comment/components","sourcesContent":["<template>\n    <div :class=\"commentClass\">\n        <!-- avatar -->\n        <div class=\"gt-avatar gt-comment-avatar\">\n            <img :src=\"avatarUrl\" alt=\"avatar\">\n        </div>\n        <!-- comment content -->\n        <div class=\"gt-comment-content\">\n            <div class=\"gt-comment-header\">\n                <a\n                    class=\"gt-comment-username\"\n                    :href=\"userInfoUrl\">\n                    {{userName}}\n                </a>\n                <span class=\"gt-comment-text\">\n                    {{commentedText}}\n                </span>\n                <!-- date -->\n                <span class=\"gt-comment-date\">\n                    {{commentDate}}\n                </span>\n                <!-- comment like -->\n                <a class=\"gt-comment-like\" @click=\"likeAction\" v-if=\"reactions\">\n                    <SvgSpinner\n                        v-if=\"reactions.viewerHasReacted\"\n                        class=\"gt-ico-heart\" \n                        name=\"heart_on\" \n                        :text=\"reactionCount\" />\n                    <SvgSpinner\n                        v-else\n                        class=\"gt-ico-heart\" \n                        name=\"heart\" \n                        :text=\"reactionCount\"/>\n                </a>\n                <!-- edit -->\n                <a \n                    v-if=\"enableEdit\"\n                    :href=\"comment.html_url\" \n                    class=\"gt-comment-edit\" \n                    target=\"_blank\">\n                    <SvgSpinner class=\"gt-ico-edit\" name=\"edit\"/>\n                </a>\n                <a \n                    v-else\n                    class=\"gt-comment-reply\" \n                    @click=\"reply\">\n                    <SvgSpinner class=\"gt-ico-reply\" name=\"reply\"/>\n                </a>\n            </div>\n            <div \n                class=\"gt-comment-body markdown-body\" \n                v-html=\"comment.body_html\"></div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport Svg from \"./Svg\";\nimport distanceInWordsToNow from \"date-fns/distance_in_words_to_now\";\nimport buildDistanceInWordsLocaleZHCN from \"date-fns/locale/zh_cn/build_distance_in_words_locale/index\";\nimport \"github-markdown-css/github-markdown.css\";\n\nconst ZHCN = buildDistanceInWordsLocaleZHCN();\n\nexport default {\n    components: {\n        SvgSpinner: Svg\n    },\n    props: {\n        user: {\n            default: null\n        },\n        comment: {\n            default: null\n        },\n        language: {\n            default: \"en\"\n        },\n        commentedText: {\n            default: \"\"\n        },\n        admin: {\n            default: () => []\n        }\n    },\n    computed: {\n        enableEdit() {\n            if (this.user) {\n                return this.comment.user.login === this.user.login;\n            }\n            return false;\n        },\n        avatarUrl() {\n            if (this.comment.user) {\n                return this.comment.user.avatar_url;\n            }\n            return null;\n        },\n        userInfoUrl() {\n            if (this.comment.user) {\n                return this.comment.user.html_url;\n            }\n            return null;\n        },\n        userName() {\n            if (this.comment.user) {\n                return this.comment.user.login;\n            }\n            return \"\";\n        },\n        commentDate() {\n            distanceInWordsToNow(this.comment.created_at, {\n                addSuffix: true,\n                locale: {\n                    distanceInWords: ZHCN\n                }\n            });\n        },\n        reactions() {\n            return this.comment.reactions;\n        },\n        reactionCount() {\n            let count = 0;\n            const reactions = this.reactions;\n            if (reactions && reactions.totalCount) {\n                count = reactions.totalCount;\n                if (\n                    reactions.totalCount === 100 &&\n                    reactions.pageInfo &&\n                    reactions.pageInfo.hasNextPage\n                ) {\n                    count = \"100+\";\n                }\n            }\n            return count;\n        },\n        isAdmin() {\n            return ~[]\n                .concat(this.admin)\n                .map(a => a.toLowerCase())\n                .indexOf(this.comment.user.login.toLowerCase());\n        },\n        commentClass() {\n            return [\n                \"gt-comment\",\n                {\n                    \"gt-comment-admin\": this.isAdmin\n                }\n            ];\n        }\n    },\n    methods: {\n        reply() {\n            this.$emit('reply', this.comment)\n        },\n        likeAction() {\n            if (this.reactions && this.reactions.viewerHasReacted) {\n                this.$emit('unlike', this.comment)\n            } else {\n                this.$emit('like', this.comment)\n            }\n        }\n    }\n};\n</script>\n"]}]}