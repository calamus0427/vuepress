{"remainingRequest":"/Users/calamus/calamus/my-project/vue-press/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/calamus/calamus/my-project/vue-press/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/calamus/calamus/my-project/vue-press/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/calamus/calamus/my-project/vue-press/node_modules/vuepress-theme-yubisaki/animation/particleBoom.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/vuepress-theme-yubisaki/animation/particleBoom.vue","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Date$now from \"/Users/calamus/calamus/my-project/vue-press/node_modules/@babel/runtime-corejs2/core-js/date/now\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport html2canvas from 'html2canvas';\nimport { ExplodingParticle } from '../lib/animation';\nexport default {\n  data: function data() {\n    return {\n      particleCanvas: null,\n      particleCtx: null,\n      reductionFactor: 17,\n      ctx: null,\n      particles: [],\n      slots: this.$slots\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    window.onresize = this.resize;\n    this.$nextTick(function () {\n      _this.play();\n\n      window.requestAnimationFrame(_this.update);\n    });\n  },\n  computed: {\n    btn: function btn() {\n      return this.$refs.particleContainer;\n    }\n  },\n  methods: {\n    play: function play() {\n      var _this2 = this;\n\n      html2canvas(this.btn, {\n        logging: false\n      }).then(function (canvas) {\n        _this2.ctx = canvas.getContext('2d'); // 创建 canvas\n\n        _this2.createParticleCanvas();\n      });\n    },\n    click: function click() {\n      var width = this.btn.offsetWidth;\n      var height = this.btn.offsetHeight; // 获取色值\n\n      var colorData = this.ctx.getImageData(0, 0, width, height).data;\n      var count = 0; // 遍历按钮的位置, 创建粒子\n\n      for (var localX = 0; localX < width; localX++) {\n        for (var localY = 0; localY < height; localY++) {\n          if (count % this.reductionFactor === 0) {\n            var index = (localY * width + localX) * 4;\n            var rgbaColorArr = colorData.slice(index, index + 4);\n            var bcr = this.btn.getBoundingClientRect();\n            var globalX = bcr.left + localX + window.scrollX;\n            var globalY = bcr.top + localY + window.scrollY; // 创建一个粒子\n\n            this.createParticleAtPoint(globalX, globalY, rgbaColorArr);\n          }\n\n          count++;\n        }\n      }\n    },\n    createParticleAtPoint: function createParticleAtPoint(x, y, colorData) {\n      var particle = new ExplodingParticle();\n      particle.rgbArray = colorData;\n      particle.startX = x;\n      particle.startY = y;\n      particle.startTime = _Date$now();\n      this.particles.push(particle);\n    },\n    createParticleCanvas: function createParticleCanvas() {\n      this.particleCanvas = document.createElement('canvas');\n      this.particleCtx = this.particleCanvas.getContext('2d'); // Size our canvas\n\n      this.particleCanvas.width = window.innerWidth;\n      this.particleCanvas.height = window.innerHeight; // Position out canvas\n\n      this.particleCanvas.style.position = 'absolute';\n      this.particleCanvas.style.top = '0';\n      this.particleCanvas.style.left = '0'; // Make sure it's on top of other elements\n\n      this.particleCanvas.style.zIndex = '1001'; // Make sure other elements under it are clickable\n\n      this.particleCanvas.style.pointerEvents = 'none'; // Add our canvas to the page\n\n      document.body.appendChild(this.particleCanvas);\n    },\n    resize: function resize() {\n      if (!this.particleCanvas) return;\n      this.particleCanvas.width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n      this.particleCanvas.height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    },\n    update: function update() {\n      // Clear out the old particles\n      if (this.particleCtx) {\n        this.particleCtx.clearRect(0, 0, window.innerWidth, window.innerHeight);\n      } // Draw all of our particles in their new location\n\n\n      for (var i = 0; i < this.particles.length; i++) {\n        this.particles[i].draw(this.particleCtx); // 最后一个粒子完成动画, 清除旧的粒子\n\n        if (i === this.particles.length - 1) {\n          var percent = (_Date$now() - this.particles[i].startTime) / this.particles[i].animationDuration;\n\n          if (percent > 1) {\n            this.particles = [];\n          }\n        }\n      } // Animate performantly\n\n\n      window.requestAnimationFrame(this.update);\n    }\n  }\n};",{"version":3,"sources":["particleBoom.vue"],"names":[],"mappings":";;;;;;;;;;AAUA,OAAA,WAAA,MAAA,aAAA;AACA,SAAA,iBAAA,QAAA,kBAAA;AAEA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,cAAA,EAAA,IADA;AAEA,MAAA,WAAA,EAAA,IAFA;AAGA,MAAA,eAAA,EAAA,EAHA;AAIA,MAAA,GAAA,EAAA,IAJA;AAKA,MAAA,SAAA,EAAA,EALA;AAMA,MAAA,KAAA,EAAA,KAAA;AANA,KAAA;AAQA,GAVA;AAWA,EAAA,OAXA,qBAWA;AAAA;;AACA,IAAA,MAAA,CAAA,QAAA,GAAA,KAAA,MAAA;AACA,SAAA,SAAA,CAAA,YAAA;AACA,MAAA,KAAA,CAAA,IAAA;;AACA,MAAA,MAAA,CAAA,qBAAA,CAAA,KAAA,CAAA,MAAA;AACA,KAHA;AAIA,GAjBA;AAkBA,EAAA,QAAA,EAAA;AACA,IAAA,GADA,iBACA;AACA,aAAA,KAAA,KAAA,CAAA,iBAAA;AACA;AAHA,GAlBA;AAuBA,EAAA,OAAA,EAAA;AACA,IAAA,IADA,kBACA;AAAA;;AACA,MAAA,WAAA,CAAA,KAAA,GAAA,EAAA;AAAA,QAAA,OAAA,EAAA;AAAA,OAAA,CAAA,CAAA,IAAA,CAAA,UAAA,MAAA,EAAA;AACA,QAAA,MAAA,CAAA,GAAA,GAAA,MAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CADA,CAEA;;AACA,QAAA,MAAA,CAAA,oBAAA;AACA,OAJA;AAKA,KAPA;AAQA,IAAA,KARA,mBAQA;AACA,UAAA,KAAA,GAAA,KAAA,GAAA,CAAA,WAAA;AACA,UAAA,MAAA,GAAA,KAAA,GAAA,CAAA,YAAA,CAFA,CAIA;;AACA,UAAA,SAAA,GAAA,KAAA,GAAA,CAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,MAAA,EAAA,IAAA;AAEA,UAAA,KAAA,GAAA,CAAA,CAPA,CASA;;AACA,WAAA,IAAA,MAAA,GAAA,CAAA,EAAA,MAAA,GAAA,KAAA,EAAA,MAAA,EAAA,EAAA;AACA,aAAA,IAAA,MAAA,GAAA,CAAA,EAAA,MAAA,GAAA,MAAA,EAAA,MAAA,EAAA,EAAA;AACA,cAAA,KAAA,GAAA,KAAA,eAAA,KAAA,CAAA,EAAA;AACA,gBAAA,KAAA,GAAA,CAAA,MAAA,GAAA,KAAA,GAAA,MAAA,IAAA,CAAA;AACA,gBAAA,YAAA,GAAA,SAAA,CAAA,KAAA,CAAA,KAAA,EAAA,KAAA,GAAA,CAAA,CAAA;AAEA,gBAAA,GAAA,GAAA,KAAA,GAAA,CAAA,qBAAA,EAAA;AACA,gBAAA,OAAA,GAAA,GAAA,CAAA,IAAA,GAAA,MAAA,GAAA,MAAA,CAAA,OAAA;AACA,gBAAA,OAAA,GAAA,GAAA,CAAA,GAAA,GAAA,MAAA,GAAA,MAAA,CAAA,OAAA,CANA,CAOA;;AACA,iBAAA,qBAAA,CAAA,OAAA,EAAA,OAAA,EAAA,YAAA;AACA;;AACA,UAAA,KAAA;AACA;AACA;AACA,KAjCA;AAkCA,IAAA,qBAlCA,iCAkCA,CAlCA,EAkCA,CAlCA,EAkCA,SAlCA,EAkCA;AACA,UAAA,QAAA,GAAA,IAAA,iBAAA,EAAA;AACA,MAAA,QAAA,CAAA,QAAA,GAAA,SAAA;AACA,MAAA,QAAA,CAAA,MAAA,GAAA,CAAA;AACA,MAAA,QAAA,CAAA,MAAA,GAAA,CAAA;AACA,MAAA,QAAA,CAAA,SAAA,GAAA,WAAA;AAEA,WAAA,SAAA,CAAA,IAAA,CAAA,QAAA;AACA,KA1CA;AA2CA,IAAA,oBA3CA,kCA2CA;AACA,WAAA,cAAA,GAAA,QAAA,CAAA,aAAA,CAAA,QAAA,CAAA;AACA,WAAA,WAAA,GAAA,KAAA,cAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CAFA,CAIA;;AACA,WAAA,cAAA,CAAA,KAAA,GAAA,MAAA,CAAA,UAAA;AACA,WAAA,cAAA,CAAA,MAAA,GAAA,MAAA,CAAA,WAAA,CANA,CAQA;;AACA,WAAA,cAAA,CAAA,KAAA,CAAA,QAAA,GAAA,UAAA;AACA,WAAA,cAAA,CAAA,KAAA,CAAA,GAAA,GAAA,GAAA;AACA,WAAA,cAAA,CAAA,KAAA,CAAA,IAAA,GAAA,GAAA,CAXA,CAaA;;AACA,WAAA,cAAA,CAAA,KAAA,CAAA,MAAA,GAAA,MAAA,CAdA,CAgBA;;AACA,WAAA,cAAA,CAAA,KAAA,CAAA,aAAA,GAAA,MAAA,CAjBA,CAmBA;;AACA,MAAA,QAAA,CAAA,IAAA,CAAA,WAAA,CAAA,KAAA,cAAA;AACA,KAhEA;AAiEA,IAAA,MAjEA,oBAiEA;AACA,UAAA,CAAA,KAAA,cAAA,EAAA;AACA,WAAA,cAAA,CAAA,KAAA,GACA,MAAA,CAAA,UAAA,IACA,QAAA,CAAA,eAAA,CAAA,WADA,IAEA,QAAA,CAAA,IAAA,CAAA,WAHA;AAIA,WAAA,cAAA,CAAA,MAAA,GACA,MAAA,CAAA,WAAA,IACA,QAAA,CAAA,eAAA,CAAA,YADA,IAEA,QAAA,CAAA,IAAA,CAAA,YAHA;AAIA,KA3EA;AA4EA,IAAA,MA5EA,oBA4EA;AACA;AACA,UAAA,KAAA,WAAA,EAAA;AACA,aAAA,WAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,EAAA,MAAA,CAAA,UAAA,EAAA,MAAA,CAAA,WAAA;AACA,OAJA,CAMA;;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,SAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,aAAA,SAAA,CAAA,CAAA,EAAA,IAAA,CAAA,KAAA,WAAA,EADA,CAGA;;AACA,YAAA,CAAA,KAAA,KAAA,SAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,cAAA,OAAA,GACA,CAAA,cAAA,KAAA,SAAA,CAAA,CAAA,EAAA,SAAA,IACA,KAAA,SAAA,CAAA,CAAA,EAAA,iBAFA;;AAIA,cAAA,OAAA,GAAA,CAAA,EAAA;AACA,iBAAA,SAAA,GAAA,EAAA;AACA;AACA;AACA,OApBA,CAqBA;;;AACA,MAAA,MAAA,CAAA,qBAAA,CAAA,KAAA,MAAA;AACA;AAnGA;AAvBA,CAAA","sourcesContent":["<template>\n  <div \n    @click=\"click\" \n    ref=\"particleContainer\" \n    id=\"particleContainer\">\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nimport html2canvas from 'html2canvas';\nimport { ExplodingParticle } from '../lib/animation';\n\nexport default {\n  data() {\n    return {\n      particleCanvas: null,\n      particleCtx: null,\n      reductionFactor: 17,\n      ctx: null,\n      particles: [],\n      slots: this.$slots\n    };\n  },\n  mounted() {\n    window.onresize = this.resize;\n    this.$nextTick(() => {\n      this.play();\n      window.requestAnimationFrame(this.update);\n    });\n  },\n  computed: {\n    btn() {\n      return this.$refs.particleContainer;\n    }\n  },\n  methods: {\n    play() {\n      html2canvas(this.btn, { logging: false }).then(canvas => {\n        this.ctx = canvas.getContext('2d');\n        // 创建 canvas\n        this.createParticleCanvas();\n      });\n    },\n    click() {\n      const width = this.btn.offsetWidth;\n      const height = this.btn.offsetHeight;\n\n      // 获取色值\n      let colorData = this.ctx.getImageData(0, 0, width, height).data;\n\n      let count = 0;\n\n      // 遍历按钮的位置, 创建粒子\n      for (let localX = 0; localX < width; localX++) {\n        for (let localY = 0; localY < height; localY++) {\n          if (count % this.reductionFactor === 0) {\n            let index = (localY * width + localX) * 4;\n            let rgbaColorArr = colorData.slice(index, index + 4);\n\n            let bcr = this.btn.getBoundingClientRect();\n            let globalX = bcr.left + localX + window.scrollX;\n            let globalY = bcr.top + localY + window.scrollY;\n            // 创建一个粒子\n            this.createParticleAtPoint(globalX, globalY, rgbaColorArr);\n          }\n          count++;\n        }\n      }\n    },\n    createParticleAtPoint(x, y, colorData) {\n      let particle = new ExplodingParticle();\n      particle.rgbArray = colorData;\n      particle.startX = x;\n      particle.startY = y;\n      particle.startTime = Date.now();\n\n      this.particles.push(particle);\n    },\n    createParticleCanvas() {\n      this.particleCanvas = document.createElement('canvas');\n      this.particleCtx = this.particleCanvas.getContext('2d');\n\n      // Size our canvas\n      this.particleCanvas.width = window.innerWidth;\n      this.particleCanvas.height = window.innerHeight;\n\n      // Position out canvas\n      this.particleCanvas.style.position = 'absolute';\n      this.particleCanvas.style.top = '0';\n      this.particleCanvas.style.left = '0';\n\n      // Make sure it's on top of other elements\n      this.particleCanvas.style.zIndex = '1001';\n\n      // Make sure other elements under it are clickable\n      this.particleCanvas.style.pointerEvents = 'none';\n\n      // Add our canvas to the page\n      document.body.appendChild(this.particleCanvas);\n    },\n    resize() {\n      if (!this.particleCanvas) return;\n      this.particleCanvas.width =\n        window.innerWidth ||\n        document.documentElement.clientWidth ||\n        document.body.clientWidth;\n      this.particleCanvas.height =\n        window.innerHeight ||\n        document.documentElement.clientHeight ||\n        document.body.clientHeight;\n    },\n    update() {\n      // Clear out the old particles\n      if (this.particleCtx) {\n        this.particleCtx.clearRect(0, 0, window.innerWidth, window.innerHeight);\n      }\n\n      // Draw all of our particles in their new location\n      for (let i = 0; i < this.particles.length; i++) {\n        this.particles[i].draw(this.particleCtx);\n\n        // 最后一个粒子完成动画, 清除旧的粒子\n        if (i === this.particles.length - 1) {\n          let percent =\n            (Date.now() - this.particles[i].startTime) /\n            this.particles[i].animationDuration;\n\n          if (percent > 1) {\n            this.particles = [];\n          }\n        }\n      }\n      // Animate performantly\n      window.requestAnimationFrame(this.update);\n    }\n  }\n};\n</script>\n"],"sourceRoot":"node_modules/vuepress-theme-yubisaki/animation"}]}