{"remainingRequest":"/Users/calamus/calamus/my-project/vue-press/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/calamus/calamus/my-project/vue-press/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/calamus/calamus/my-project/vue-press/docs/faq/README.md?vue&type=template&id=3fb42fc0&","dependencies":[{"path":"/Users/calamus/calamus/my-project/vue-press/docs/faq/README.md","mtime":1547029404000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/@vuepress/markdown-loader/index.js","mtime":1546968779000}],"contextDependencies":[],"result":["\n<ContentSlotsDistributor :slot-key=\"$parent.slotKey\"><h1 id=\"faq\"><a class=\"header-anchor\" href=\"#faq\" aria-hidden=\"true\">#</a> FAQ</h1>\n<h2 id=\"why-can-t-palette-styl-and-index-styl-merge-into-one-api\"><a class=\"header-anchor\" href=\"#why-can-t-palette-styl-and-index-styl-merge-into-one-api\" aria-hidden=\"true\">#</a> Why can't <code>palette.styl</code> and <code>index.styl</code> merge into one API?</h2>\n<p>The <code>palette.styl</code> is responsible for global color settings. During compilation, theme color constants should be resolved by the preprocessor first and then be applied to the global context.</p>\n<p>But for <code>index.styl</code>. its job is to override the default styles of application. According to the priority principle of css, the later style has a higher priority, so it should be generated at the end of the CSS file.</p>\n<p>A simple diagram describing the stylus compiler's compilation order as follows:</p>\n<FlowChart id=\"flowchart_382ee14a\" :code=\"$dataBlock.flowchart_382ee14a\" preset=\"vue\"></FlowChart><br>\n<h2 id=\"what-s-the-differences-between-the-clientdynamicmodules-and-enhanceappfiles\"><a class=\"header-anchor\" href=\"#what-s-the-differences-between-the-clientdynamicmodules-and-enhanceappfiles\" aria-hidden=\"true\">#</a> What's the differences between the <code>clientDynamicModules</code> and <code>enhanceAppFiles</code>?</h2>\n<p>Let's take a look back first, both <code>clientDynamicModules</code> and <code>enhanceAppFiles</code> can generate modules with dynamic javascript code during compile time.</p>\n<p>The difference is that the files generated by <code>enhanceAppFiles</code> will be loaded and applied automatically when the application is initialized on the client side. While the files generated by <code>clientDynamicModules</code> needs to be imported as <code>@dynamic/xxx</code> by the users themselves.</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Import by entry file automatically.</span>\n  enhanceAppFiles<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'constans-a'</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`...`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// Need to use via: import '@dynamic/constans-b'</span>\n  <span class=\"token function\">clientDynamicModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">'constans-b'</span><span class=\"token punctuation\">,</span>\n      content<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`...`</span></span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"when-do-i-need-to-use-enhanceappfiles\"><a class=\"header-anchor\" href=\"#when-do-i-need-to-use-enhanceappfiles\" aria-hidden=\"true\">#</a> When do I need to use <code>enhanceAppFiles</code>?</h2>\n<ol>\n<li>I want to execute some code on the client side automatically.</li>\n<li>I don't have need for reuse of this module.</li>\n</ol>\n<p><strong>Example:</strong></p>\n<ul>\n<li><a href=\"https://github.com/vuejs/vuepress/tree/master/packages/@vuepress/plugin-register-components/index.js#L24\" target=\"_blank\" rel=\"noopener noreferrer\">@vuepress/plugin-register-components<OutboundLink/></a>: Automatically registering components on the client side.</li>\n<li><a href=\"https://github.com/vuejs/vuepress/blob/master/packages/@vuepress/plugin-pagination/index.js#L14\" target=\"_blank\" rel=\"noopener noreferrer\">@vuepress/plugin-pagination<OutboundLink/></a>: Automatically insert Vue plugins to expand the API of the client.</li>\n</ul>\n<h2 id=\"when-do-i-need-to-use-clientdynamicmodules\"><a class=\"header-anchor\" href=\"#when-do-i-need-to-use-clientdynamicmodules\" aria-hidden=\"true\">#</a> When do I need to use <code>clientDynamicModules</code>?</h2>\n<ol>\n<li>I want to generate a dynamic module that needs to be invoked at a specific time.</li>\n<li>I want to use this module in different modules.</li>\n</ol>\n<p><strong>Example:</strong></p>\n<ul>\n<li><a href=\"https://github.com/vuejs/vuepress/blob/master/packages/@vuepress/plugin-blog/index.js#L145\" target=\"_blank\" rel=\"noopener noreferrer\">@vuepress/plugin-blog<OutboundLink/></a>: Using compile-time metadata to generate some dynamic blog-related modules and initialize them on the client side by using <code>enhanceAppFiles</code>.</li>\n</ul>\n</ContentSlotsDistributor>\n",null]}