{"remainingRequest":"/Users/calamus/calamus/my-project/vue-press/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/calamus/calamus/my-project/vue-press/node_modules/vuepress-theme-yubisaki/animation/particleBoom.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/vuepress-theme-yubisaki/animation/particleBoom.vue","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport html2canvas from 'html2canvas';\nimport { ExplodingParticle } from '../lib/animation';\n\nexport default {\n  data() {\n    return {\n      particleCanvas: null,\n      particleCtx: null,\n      reductionFactor: 17,\n      ctx: null,\n      particles: [],\n      slots: this.$slots\n    };\n  },\n  mounted() {\n    window.onresize = this.resize;\n    this.$nextTick(() => {\n      this.play();\n      window.requestAnimationFrame(this.update);\n    });\n  },\n  computed: {\n    btn() {\n      return this.$refs.particleContainer;\n    }\n  },\n  methods: {\n    play() {\n      html2canvas(this.btn, { logging: false }).then(canvas => {\n        this.ctx = canvas.getContext('2d');\n        // 创建 canvas\n        this.createParticleCanvas();\n      });\n    },\n    click() {\n      const width = this.btn.offsetWidth;\n      const height = this.btn.offsetHeight;\n\n      // 获取色值\n      let colorData = this.ctx.getImageData(0, 0, width, height).data;\n\n      let count = 0;\n\n      // 遍历按钮的位置, 创建粒子\n      for (let localX = 0; localX < width; localX++) {\n        for (let localY = 0; localY < height; localY++) {\n          if (count % this.reductionFactor === 0) {\n            let index = (localY * width + localX) * 4;\n            let rgbaColorArr = colorData.slice(index, index + 4);\n\n            let bcr = this.btn.getBoundingClientRect();\n            let globalX = bcr.left + localX + window.scrollX;\n            let globalY = bcr.top + localY + window.scrollY;\n            // 创建一个粒子\n            this.createParticleAtPoint(globalX, globalY, rgbaColorArr);\n          }\n          count++;\n        }\n      }\n    },\n    createParticleAtPoint(x, y, colorData) {\n      let particle = new ExplodingParticle();\n      particle.rgbArray = colorData;\n      particle.startX = x;\n      particle.startY = y;\n      particle.startTime = Date.now();\n\n      this.particles.push(particle);\n    },\n    createParticleCanvas() {\n      this.particleCanvas = document.createElement('canvas');\n      this.particleCtx = this.particleCanvas.getContext('2d');\n\n      // Size our canvas\n      this.particleCanvas.width = window.innerWidth;\n      this.particleCanvas.height = window.innerHeight;\n\n      // Position out canvas\n      this.particleCanvas.style.position = 'absolute';\n      this.particleCanvas.style.top = '0';\n      this.particleCanvas.style.left = '0';\n\n      // Make sure it's on top of other elements\n      this.particleCanvas.style.zIndex = '1001';\n\n      // Make sure other elements under it are clickable\n      this.particleCanvas.style.pointerEvents = 'none';\n\n      // Add our canvas to the page\n      document.body.appendChild(this.particleCanvas);\n    },\n    resize() {\n      if (!this.particleCanvas) return;\n      this.particleCanvas.width =\n        window.innerWidth ||\n        document.documentElement.clientWidth ||\n        document.body.clientWidth;\n      this.particleCanvas.height =\n        window.innerHeight ||\n        document.documentElement.clientHeight ||\n        document.body.clientHeight;\n    },\n    update() {\n      // Clear out the old particles\n      if (this.particleCtx) {\n        this.particleCtx.clearRect(0, 0, window.innerWidth, window.innerHeight);\n      }\n\n      // Draw all of our particles in their new location\n      for (let i = 0; i < this.particles.length; i++) {\n        this.particles[i].draw(this.particleCtx);\n\n        // 最后一个粒子完成动画, 清除旧的粒子\n        if (i === this.particles.length - 1) {\n          let percent =\n            (Date.now() - this.particles[i].startTime) /\n            this.particles[i].animationDuration;\n\n          if (percent > 1) {\n            this.particles = [];\n          }\n        }\n      }\n      // Animate performantly\n      window.requestAnimationFrame(this.update);\n    }\n  }\n};\n",{"version":3,"sources":["particleBoom.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"particleBoom.vue","sourceRoot":"node_modules/vuepress-theme-yubisaki/animation","sourcesContent":["<template>\n  <div \n    @click=\"click\" \n    ref=\"particleContainer\" \n    id=\"particleContainer\">\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nimport html2canvas from 'html2canvas';\nimport { ExplodingParticle } from '../lib/animation';\n\nexport default {\n  data() {\n    return {\n      particleCanvas: null,\n      particleCtx: null,\n      reductionFactor: 17,\n      ctx: null,\n      particles: [],\n      slots: this.$slots\n    };\n  },\n  mounted() {\n    window.onresize = this.resize;\n    this.$nextTick(() => {\n      this.play();\n      window.requestAnimationFrame(this.update);\n    });\n  },\n  computed: {\n    btn() {\n      return this.$refs.particleContainer;\n    }\n  },\n  methods: {\n    play() {\n      html2canvas(this.btn, { logging: false }).then(canvas => {\n        this.ctx = canvas.getContext('2d');\n        // 创建 canvas\n        this.createParticleCanvas();\n      });\n    },\n    click() {\n      const width = this.btn.offsetWidth;\n      const height = this.btn.offsetHeight;\n\n      // 获取色值\n      let colorData = this.ctx.getImageData(0, 0, width, height).data;\n\n      let count = 0;\n\n      // 遍历按钮的位置, 创建粒子\n      for (let localX = 0; localX < width; localX++) {\n        for (let localY = 0; localY < height; localY++) {\n          if (count % this.reductionFactor === 0) {\n            let index = (localY * width + localX) * 4;\n            let rgbaColorArr = colorData.slice(index, index + 4);\n\n            let bcr = this.btn.getBoundingClientRect();\n            let globalX = bcr.left + localX + window.scrollX;\n            let globalY = bcr.top + localY + window.scrollY;\n            // 创建一个粒子\n            this.createParticleAtPoint(globalX, globalY, rgbaColorArr);\n          }\n          count++;\n        }\n      }\n    },\n    createParticleAtPoint(x, y, colorData) {\n      let particle = new ExplodingParticle();\n      particle.rgbArray = colorData;\n      particle.startX = x;\n      particle.startY = y;\n      particle.startTime = Date.now();\n\n      this.particles.push(particle);\n    },\n    createParticleCanvas() {\n      this.particleCanvas = document.createElement('canvas');\n      this.particleCtx = this.particleCanvas.getContext('2d');\n\n      // Size our canvas\n      this.particleCanvas.width = window.innerWidth;\n      this.particleCanvas.height = window.innerHeight;\n\n      // Position out canvas\n      this.particleCanvas.style.position = 'absolute';\n      this.particleCanvas.style.top = '0';\n      this.particleCanvas.style.left = '0';\n\n      // Make sure it's on top of other elements\n      this.particleCanvas.style.zIndex = '1001';\n\n      // Make sure other elements under it are clickable\n      this.particleCanvas.style.pointerEvents = 'none';\n\n      // Add our canvas to the page\n      document.body.appendChild(this.particleCanvas);\n    },\n    resize() {\n      if (!this.particleCanvas) return;\n      this.particleCanvas.width =\n        window.innerWidth ||\n        document.documentElement.clientWidth ||\n        document.body.clientWidth;\n      this.particleCanvas.height =\n        window.innerHeight ||\n        document.documentElement.clientHeight ||\n        document.body.clientHeight;\n    },\n    update() {\n      // Clear out the old particles\n      if (this.particleCtx) {\n        this.particleCtx.clearRect(0, 0, window.innerWidth, window.innerHeight);\n      }\n\n      // Draw all of our particles in their new location\n      for (let i = 0; i < this.particles.length; i++) {\n        this.particles[i].draw(this.particleCtx);\n\n        // 最后一个粒子完成动画, 清除旧的粒子\n        if (i === this.particles.length - 1) {\n          let percent =\n            (Date.now() - this.particles[i].startTime) /\n            this.particles[i].animationDuration;\n\n          if (percent > 1) {\n            this.particles = [];\n          }\n        }\n      }\n      // Animate performantly\n      window.requestAnimationFrame(this.update);\n    }\n  }\n};\n</script>\n"]}]}