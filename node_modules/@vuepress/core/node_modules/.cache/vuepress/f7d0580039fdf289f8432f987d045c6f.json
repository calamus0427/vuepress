{"remainingRequest":"/Users/calamus/calamus/my-project/vue-press/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/calamus/calamus/my-project/vue-press/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/calamus/calamus/my-project/vue-press/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/calamus/calamus/my-project/vue-press/node_modules/vuepress-theme-yubisaki/package/comment/index.vue?vue&type=template&id=44d14ef6&","dependencies":[{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/vuepress-theme-yubisaki/package/comment/index.vue","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/calamus/calamus/my-project/vue-press/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { class: _vm.containerClass }, [\n    _vm.isIniting\n      ? _c(\"div\", { staticClass: \"gt-initing\" }, [\n          _c(\"i\", { staticClass: \"gt-loader\" }),\n          _vm._v(\" \"),\n          _c(\"p\", { staticClass: \"gt-initing-text\" }, [\n            _vm._v(_vm._s(_vm.i18n.t(\"init\")))\n          ])\n        ])\n      : _vm._e(),\n    _vm._v(\" \"),\n    !_vm.isIniting && !_vm.isNoInit\n      ? _c(\"div\", { key: \"meta\", staticClass: \"gt-meta\" }, [\n          _c(\"span\", {\n            staticClass: \"gt-counts\",\n            domProps: { innerHTML: _vm._s(_vm.countHtml()) }\n          }),\n          _vm._v(\" \"),\n          _vm.isPopupVisible\n            ? _c(\n                \"div\",\n                { staticClass: \"gt-popup\" },\n                [\n                  _vm.user\n                    ? _c(\"Action\", {\n                        class: _vm.ascClasses,\n                        attrs: { text: _vm.i18n.t(\"sort-asc\") },\n                        on: {\n                          click: function($event) {\n                            _vm.handleSort(\"first\")\n                          }\n                        }\n                      })\n                    : _vm._e(),\n                  _vm._v(\" \"),\n                  _vm.user\n                    ? _c(\"Action\", {\n                        class: _vm.descClasses,\n                        attrs: { text: _vm.i18n.t(\"sort-desc\") },\n                        on: {\n                          click: function($event) {\n                            _vm.handleSort(\"last\")\n                          }\n                        }\n                      })\n                    : _vm._e(),\n                  _vm._v(\" \"),\n                  _vm.user\n                    ? _c(\"Action\", {\n                        staticClass: \"gt-action-logout\",\n                        attrs: { text: _vm.i18n.t(\"logout\") },\n                        on: { click: _vm.handleLogout }\n                      })\n                    : _c(\n                        \"a\",\n                        {\n                          staticClass: \"gt-action gt-action-login\",\n                          on: { click: _vm.handleLogin }\n                        },\n                        [\n                          _vm._v(\n                            \"\\n        \" +\n                              _vm._s(_vm.i18n.t(\"login-with-github\")) +\n                              \"\\n      \"\n                          )\n                        ]\n                      ),\n                  _vm._v(\" \"),\n                  _vm._m(0)\n                ],\n                1\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"gt-user\" }, [\n            _vm.user\n              ? _c(\n                  \"div\",\n                  {\n                    class: _vm.userInnerClass,\n                    on: {\n                      click: function($event) {\n                        $event.stopPropagation()\n                        $event.preventDefault()\n                        return _vm.handlePopup($event)\n                      }\n                    }\n                  },\n                  [\n                    _c(\"span\", { staticClass: \"gt-user-name\" }, [\n                      _vm._v(_vm._s(_vm.user.login))\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"SvgSpiner\", {\n                      staticClass: \"gt-ico-arrdown\",\n                      attrs: { name: \"arrow_down\" }\n                    })\n                  ],\n                  1\n                )\n              : _c(\n                  \"div\",\n                  {\n                    class: _vm.userInnerClass,\n                    on: {\n                      click: function($event) {\n                        $event.stopPropagation()\n                        $event.preventDefault()\n                        return _vm.handlePopup($event)\n                      }\n                    }\n                  },\n                  [\n                    _c(\"span\", { staticClass: \"gt-user-name\" }, [\n                      _vm._v(_vm._s(_vm.i18n.t(\"anonymous\")))\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"SvgSpiner\", {\n                      staticClass: \"gt-ico-arrdown\",\n                      attrs: { name: \"arrow_down\" }\n                    })\n                  ],\n                  1\n                )\n          ])\n        ])\n      : _vm._e(),\n    _vm._v(\" \"),\n    _vm.isOccurError\n      ? _c(\"div\", { staticClass: \"gt-error\" }, [\n          _vm._v(\"\\n    \" + _vm._s(_vm.errorMsg) + \"\\n  \")\n        ])\n      : _vm._e(),\n    _vm._v(\" \"),\n    !_vm.isIniting && _vm.isNoInit\n      ? _c(\n          \"div\",\n          { key: \"no-init\", staticClass: \"gt-no-init\" },\n          [\n            _c(\"p\", { domProps: { innerHTML: _vm._s(_vm.noInitHtml()) } }),\n            _vm._v(\" \"),\n            _c(\"p\", {\n              domProps: { innerHTML: _vm._s(_vm.concatAuthorHtml()) }\n            }),\n            _vm._v(\" \"),\n            _vm.isAdmin\n              ? _c(\n                  \"p\",\n                  [\n                    _c(\n                      \"Button\",\n                      {\n                        attrs: { isLoading: _vm.isIssueCreating },\n                        on: { click: _vm.handleIssueCreate }\n                      },\n                      [\n                        _c(\"span\", { staticClass: \"gt-btn-text\" }, [\n                          _vm._v(_vm._s(_vm.i18n.t(\"init-issue\")))\n                        ])\n                      ]\n                    )\n                  ],\n                  1\n                )\n              : _vm._e(),\n            _vm._v(\" \"),\n            !_vm.user\n              ? _c(\n                  \"Button\",\n                  {\n                    staticClass: \"gt-btn-login\",\n                    on: { click: _vm.handleLogin }\n                  },\n                  [\n                    _c(\"span\", { staticClass: \"gt-btn-text\" }, [\n                      _vm._v(_vm._s(_vm.i18n.t(\"login-with-github\")))\n                    ])\n                  ]\n                )\n              : _vm._e()\n          ],\n          1\n        )\n      : _c(\"div\", [\n          _c(\"div\", { key: \"header\", staticClass: \"gt-header\" }, [\n            _vm.user\n              ? _c(\"div\", { staticClass: \"gt-avatar gt-header-avatar\" }, [\n                  _c(\"img\", {\n                    attrs: { src: _vm.user.avatar_url, alt: \"avatar\" }\n                  })\n                ])\n              : _c(\n                  \"a\",\n                  {\n                    staticClass: \"gt-avatar-github\",\n                    on: { click: _vm.handleLogin }\n                  },\n                  [\n                    _c(\"SvgSpiner\", {\n                      staticClass: \"gt-ico-github\",\n                      attrs: { name: \"github\" }\n                    })\n                  ],\n                  1\n                ),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"gt-header-comment\" }, [\n              _c(\"textarea\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.comment,\n                    expression: \"comment\"\n                  }\n                ],\n                ref: \"commentEL\",\n                class: _vm.contentClasses,\n                attrs: { placeholder: _vm.i18n.t(\"leave-a-comment\") },\n                domProps: { value: _vm.comment },\n                on: {\n                  focus: _vm.handleCommentFocus,\n                  blur: _vm.handleCommentBlur,\n                  keydown: [\n                    function($event) {\n                      if (\n                        !(\"button\" in $event) &&\n                        _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                      ) {\n                        return null\n                      }\n                      if (!$event.metaKey) {\n                        return null\n                      }\n                      return _vm.handleCommentKeyDown($event)\n                    },\n                    function($event) {\n                      if (\n                        !(\"button\" in $event) &&\n                        _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                      ) {\n                        return null\n                      }\n                      if (!$event.ctrlKey) {\n                        return null\n                      }\n                      return _vm.handleCommentKeyDown($event)\n                    }\n                  ],\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.comment = $event.target.value\n                  }\n                }\n              }),\n              _vm._v(\" \"),\n              _c(\"div\", {\n                class: _vm.previewClasses,\n                domProps: { innerHTML: _vm._s(_vm.previewHtml) }\n              }),\n              _vm._v(\" \"),\n              _c(\n                \"div\",\n                { staticClass: \"gt-header-controls\" },\n                [\n                  _c(\n                    \"a\",\n                    {\n                      staticClass: \"gt-header-controls-tip\",\n                      attrs: {\n                        href:\n                          \"https://guides.github.com/features/mastering-markdown/\",\n                        target: \"_blank\"\n                      }\n                    },\n                    [\n                      _c(\"SvgSpiner\", {\n                        staticClass: \"gt-ico-tip\",\n                        attrs: {\n                          name: \"tip\",\n                          text: _vm.i18n.t(\"support-markdown\")\n                        }\n                      })\n                    ],\n                    1\n                  ),\n                  _vm._v(\" \"),\n                  _vm.user\n                    ? _c(\n                        \"Button\",\n                        {\n                          staticClass: \"gt-btn-public\",\n                          attrs: { isLoading: _vm.isCreating },\n                          on: { click: _vm.handleCommentCreate }\n                        },\n                        [\n                          _c(\"span\", { staticClass: \"gt-btn-text\" }, [\n                            _vm._v(_vm._s(_vm.i18n.t(\"comment\")))\n                          ])\n                        ]\n                      )\n                    : _vm._e(),\n                  _vm._v(\" \"),\n                  _c(\n                    \"Button\",\n                    {\n                      staticClass: \"gt-btn-preview\",\n                      on: { click: _vm.handleCommentPreview }\n                    },\n                    [\n                      _c(\"span\", { staticClass: \"gt-btn-text\" }, [\n                        _vm._v(_vm._s(_vm.editOrPreview))\n                      ])\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  !_vm.user\n                    ? _c(\n                        \"Button\",\n                        {\n                          staticClass: \"gt-btn-login\",\n                          on: { click: _vm.handleLogin }\n                        },\n                        [\n                          _c(\"span\", { staticClass: \"gt-btn-text\" }, [\n                            _vm._v(_vm._s(_vm.i18n.t(\"login-with-github\")))\n                          ])\n                        ]\n                      )\n                    : _vm._e()\n                ],\n                1\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\n            \"div\",\n            { key: \"comments\", staticClass: \"gt-comments\" },\n            [\n              _c(\n                \"transition-group\",\n                { attrs: { name: \"flip-list\" } },\n                _vm._l(_vm.totalComments, function(c) {\n                  return _c(\"Comment\", {\n                    key: c.id,\n                    attrs: {\n                      comment: c,\n                      user: _vm.user,\n                      language: _vm.options.language,\n                      commentedText: _vm.i18n.t(\"commented\"),\n                      admin: _vm.options.admin\n                    },\n                    on: { like: _vm.like, unlike: _vm.unLike, reply: _vm.reply }\n                  })\n                }),\n                1\n              ),\n              _vm._v(\" \"),\n              !_vm.totalComments.length\n                ? _c(\"p\", { staticClass: \"gt-comments-null\" }, [\n                    _vm._v(\n                      \"\\n          \" +\n                        _vm._s(_vm.i18n.t(\"first-comment-person\")) +\n                        \"\\n      \"\n                    )\n                  ])\n                : _vm._e(),\n              _vm._v(\" \"),\n              !_vm.isLoadOver && _vm.totalComments.length\n                ? _c(\n                    \"div\",\n                    { staticClass: \"gt-comments-controls\" },\n                    [\n                      _c(\n                        \"Button\",\n                        {\n                          staticClass: \"gt-btn-loadmore\",\n                          attrs: { isLoading: _vm.isLoadMore },\n                          on: { click: _vm.handleCommentLoad }\n                        },\n                        [\n                          _c(\"span\", { staticClass: \"gt-btn-text\" }, [\n                            _vm._v(_vm._s(_vm.i18n.t(\"load-more\")))\n                          ])\n                        ]\n                      )\n                    ],\n                    1\n                  )\n                : _vm._e()\n            ],\n            1\n          )\n        ])\n  ])\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"gt-copyright\" }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"gt-link gt-link-project\",\n          attrs: { href: \"https://github.com/gitalk/gitalk\", target: \"_blank\" }\n        },\n        [_vm._v(\"\\n          Gitalk\\n        \")]\n      )\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}